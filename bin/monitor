#!/bin/bash
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# The Satellite command script
#

# resolve links - $0 may be a softlink
THIS="$0"
while [ -h "$THIS" ]; do
  ls=`ls -ld "$THIS"`
  link=`expr "$ls" : '.*-> \(.*\)$'`
  if expr "$link" : '.*/.*' > /dev/null; then
    THIS="$link"
  else
    THIS=`dirname "$THIS"`/"$link"
  fi
done

# if no args specified, show usage
if [ $# = 0 ]; then
  echo "Usage: satellite COMMAND"
  echo "where COMMAND is one of:"
  echo "start"
  echo "stop"
  echo "pps"
  echo " or"
  echo "any script in src directory"
  exit 1
fi

# some directories
THIS_DIR=`dirname "$THIS"`

 . ${THIS_DIR}/../config/satellite-env.sh

cd $SATELLITE_HOME

# get arguments
COMMAND=$1
shift

SATELLITE_OPTS=()

if [ $SATELLITE_LOAD_IMAGES ]; then
    SATELLITE_OPTS=(${SATELLITE_OPTS[@]} --load-images=true)
fi

SATELLITE_OPTS=(${SATELLITE_OPTS[@]} --ssl-protocol=any)

if [ -z $SATELLITE_COOKIE_FILE ]; then
    SATELLITE_COOKIE_FILE=output/cookies/satellite.cookie.txt
fi

SATELLITE_OPTS=(${SATELLITE_OPTS[@]} --cookies-file=$SATELLITE_COOKIE_FILE)

if [ -z $PROXY_POLICY ]; then
    PROXY_POLICY=0
    PROXY_IP_PORT=
fi

if (( $PROXY_POLICY == 2 )); then
    . ${THIS_DIR}/proxy_selector.sh
fi

if (( $PROXY_POLICY > 0 )) && [ -n ${PROXY_IP_PORT} ]; then
    SATELLITE_OPTS=(${SATELLITE_OPTS[@]} --proxy=${PROXY_IP_PORT})
fi

if [ -z $SATELLITE_RESTART_PERIOD ]; then
    SATELLITE_RESTART_PERIOD=30
fi

if [ -z $SATELLITE_LOG ]; then
    SATELLITE_LOG=/tmp/satellite/logs
    mkdir -p $SATELLITE_LOG
fi

if [ -z $SATELLITE_OUTPUT ]; then
    SATELLITE_OUTPUT=/tmp/satellite/output
    mkdir -p $SATELLITE_OUTPUT
fi

EXEC_CALL=($SATELLITE ${SATELLITE_OPTS[@]})
EXEC_CALL_TEST="$SATELLITE test"

function run() {
    local CMD="$1"
    shift

    JS="$SATELLITE_HOME/$CMD"

    echo "${EXEC_CALL[@]}" $JS $@
    exec "${EXEC_CALL[@]}" $JS $@
}

function run_test() {
    echo "$EXEC_CALL_TEST $@"
    exec $EXEC_CALL_TEST $@
}

# sleep for 30 minites and restart all
function start_all() {
    # kill all
    pkill phantomjs

    while [ 1 ]
    do
        echo "-------------------------------------"
        echo `date`
        echo "start all..."
        run src/coordinator.js start
        echo "waiting..."
        sleep `expr $SATELLITE_RESTART_PERIOD \* 60`
        echo "stop all..."
        pkill phantomjs

        # delete old log files
        echo "try remove old log files : "
        echo ">>>>>>>>>>>>"
        ls $SATELLITE_LOG
        ls $SATELLITE_OUTPUT
        find $SATELLITE_LOG $SATELLITE_OUTPUT -mtime +2 -a -type f -print -delete
        echo "<<<<<<<<<<<<"
        ls $SATELLITE_LOG
        ls $SATELLITE_OUTPUT
        echo
    done
}

function stop_all() {
    echo "running phantomjs programs : "
    ps -ef | grep satellite
    ps -ef | grep phantomjs
    pkill phantomjs
    echo "waiting..."
    sleep 3
    echo "running phantomjs programs : "
    ps -ef | grep satellite
    ps -ef | grep phantomjs
    pkill satellite
}

function pps() {
    ps -ef | grep phantomjs
}

# figure out which class to run
if [ "$COMMAND" = "start" ] ; then
    start_all $@
elif [ "$COMMAND" = "stop" ] ; then
    stop_all
elif [ "$COMMAND" = "pps" ] ; then
    pps
elif [ "$COMMAND" = "test" ] ; then
    run_test $@
else
    run $COMMAND $@
fi
