#!/bin/bash
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# The Satellite command script
#

# resolve links - $0 may be a softlink
THIS="$0"
while [ -h "$THIS" ]; do
  ls=`ls -ld "$THIS"`
  link=`expr "$ls" : '.*-> \(.*\)$'`
  if expr "$link" : '.*/.*' > /dev/null; then
    THIS="$link"
  else
    THIS=`dirname "$THIS"`/"$link"
  fi
done

declare SATELLITE
declare SATELLITE_HOME
declare THIS_DIR=`dirname "$THIS"`
declare BASH_CONFIG=${THIS_DIR}/../config/common.env.sh
declare PERIODICALLY=false
declare -i PROXY_POLICY
declare PROXY_IP_PORT
declare SATELLITE_RESTART_PERIOD
declare SATELLITE_LOG
declare SATELLITE_OUTPUT
declare SATELLITE_COOKIE_FILE
declare SATELLITE_LOAD_IMAGES

# if no args specified, show usage
if [ $# = 0 ]; then
  echo "Usage: satellite OPTIONS COMMAND"
  echo "where COMMAND is one of:"
  echo "start"
  echo "stop"
  echo "pps"
  echo " or"
  echo "any script in src directory"
  exit 1
fi

for i in "$@"
do
case ${i} in
    -c=*|--config-file=*)
    BASH_CONFIG="${i#*=}"
    shift
    ;;
    -p=*|--periodically=*)
    PERIODICALLY="${i#*=}"
    shift
    ;;
    --default)
    DEFAULT=YES
    shift
    ;;
    *)
          # unknown option
    ;;
esac
done

echo "Load bash config file : ${BASH_CONFIG}"

### Load config
 . ${BASH_CONFIG}

cd ${SATELLITE_HOME}

# get arguments
COMMAND=$1
shift

### build program options
declare -a SATELLITE_OPTS=(--load-images=${SATELLITE_LOAD_IMAGES} --ssl-protocol=any --cookies-file=${SATELLITE_COOKIE_FILE})

if (( $PROXY_POLICY == 2 )); then
    export BASH_CONFIG=${BASH_CONFIG}
    . ${THIS_DIR}/proxy_selector.sh
fi

if (( $PROXY_POLICY > 0 )) && [ -n ${PROXY_IP_PORT} ]; then
    SATELLITE_OPTS=(${SATELLITE_OPTS[@]} --proxy=${PROXY_IP_PORT})
fi

EXEC_CALL=(${SATELLITE} ${SATELLITE_OPTS[@]})
EXEC_CALL_TEST="$SATELLITE test"

mkdir -p ${SATELLITE_LOG}
mkdir -p ${SATELLITE_OUTPUT}

function run() {
    if [ ${PERIODICALLY} == "true" ]; then
        run_periodically $@
    else
        run_once $@
    fi
}

function run_once() {
    local CMD="$1"
    shift

    JS="$SATELLITE_HOME/$CMD"

    echo "${EXEC_CALL[@]}" ${JS} $@
    exec "${EXEC_CALL[@]}" ${JS} $@
}

# sleep for some time and restart all
function run_periodically() {
    # kill all
    pkill phantomjs

    seconds=`expr ${SATELLITE_RESTART_PERIOD} \* 60`
    while [ 1 ]
    do
        echo "-------------------------------------"
        echo `date`

        run_once $@

        echo "Waiting for $seconds ..."
        sleep seconds
        echo "stop all ..."
        pkill phantomjs

        clean_logs
    done
}

function clean_logs() {
    # delete old log files
    echo "try remove old log files : "
    echo ">>>>>>>>>>>>"
    ls ${SATELLITE_LOG}
    ls ${SATELLITE_OUTPUT}
    find ${SATELLITE_LOG} ${SATELLITE_OUTPUT} -mtime +2 -a -type f -print -delete
    echo "<<<<<<<<<<<<"
    ls ${SATELLITE_LOG}
    ls ${SATELLITE_OUTPUT}
    echo
}

function run_test() {
    echo "${EXEC_CALL_TEST} $@"
    exec ${EXEC_CALL_TEST} $@
}

# sleep for 30 minites and restart all
function start_all() {
    # kill all
    pkill phantomjs

    seconds=`expr ${SATELLITE_RESTART_PERIOD} \* 60`
    while [ 1 ]
    do
        echo "-------------------------------------"
        echo `date`
        echo "start all..."

        run src/coordinator.js start

        echo "Waiting for $seconds ..."
        sleep seconds
        echo "stop all ..."
        pkill phantomjs
        pkill phantomjs

        clean_logs
    done
}

function stop_all() {
    echo "running phantomjs programs : "
    ps -ef | grep satellite
    ps -ef | grep phantomjs
    pkill phantomjs
    echo "waiting..."
    sleep 3
    echo "running phantomjs programs : "
    ps -ef | grep satellite
    ps -ef | grep phantomjs
    pkill satellite
}

function pps() {
    ps -ef | grep phantomjs
}

# figure out which class to run
if [ "$COMMAND" = "start" ] ; then
    start_all
elif [ "$COMMAND" = "stop" ] ; then
    stop_all
elif [ "$COMMAND" = "pps" ] ; then
    pps
elif [ "$COMMAND" = "test" ] ; then
    run_test $@
else
    run ${COMMAND} $@
fi
