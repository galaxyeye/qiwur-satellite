#!/bin/bash
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# The Satellite command script
#

# resolve links - $0 may be a softlink
THIS="$0"
while [ -h "$THIS" ]; do
  ls=`ls -ld "$THIS"`
  link=`expr "$ls" : '.*-> \(.*\)$'`
  if expr "$link" : '.*/.*' > /dev/null; then
    THIS="$link"
  else
    THIS=`dirname "$THIS"`/"$link"
  fi
done

# if no args specified, show usage
if [ $# = 0 ]; then
  echo "Usage: satellite COMMAND"
  echo "where COMMAND is one of:"
  echo "start"
  echo "stop"
  echo "pps"
  echo " or"
  echo "any script in src directory"
  exit 1
fi

### 
# 
###

# some directories
THIS_DIR=`dirname "$THIS"`
SATELLITE_HOME=`cd "$THIS_DIR/.." ; pwd`

PHANTOMJS=$SATELLITE_HOME/bin/phantomjs
SATELLITE_OPTS=--load-images=false
# since phantomjs built-in process bugs, we must restart the system periodically
# restart every SATELLITE_RESTART_PERIOD minites
SATELLITE_RESTART_PERIOD=15

# get arguments
COMMAND=$1
shift

# default command
if [ "$COMMAND" = "" ] ; then
    COMMAND="start"
fi

EXEC_CALL="$PHANTOMJS $SATELLITE_OPTS"

function run() {
    local CMD="$1"
    shift

    JS=$SATELLITE_HOME'/src/'$CMD
    exec $EXEC_CALL $JS $@
}

# sleep for 30 minites and restart all
function start_all() {
    # kill all
    pkill phantomjs

    while [ 1 ]
    do
        echo "start all..."
        run coordinator.js start > /dev/null &
        echo "waiting..."
        sleep `expr $SATELLITE_RESTART_PERIOD \* 60`
        echo "stop all..."
        pkill phantomjs
#  > /dev/null &
    done
}

function stop_all() {
    echo "running phantomjs programs : "
    ps -ef | grep satellite
    ps -ef | grep phantomjs
    pkill phantomjs
    echo "waiting..."
    sleep 3
    echo "running phantomjs programs : "
    ps -ef | grep satellite
    ps -ef | grep phantomjs
    pkill satellite
}

function pps() {
    ps -ef | grep phantomjs
}

# figure out which class to run
if [ "$COMMAND" = "start" ] ; then
    start_all $@
elif [ "$COMMAND" = "stop" ] ; then
    stop_all
elif [ "$COMMAND" = "pps" ] ; then
    pps
else
    run $COMMAND $@
fi

